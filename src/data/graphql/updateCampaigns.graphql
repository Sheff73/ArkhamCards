mutation deleteInvestigatorDecks(
  $campaign_id: Int!,
  $investigator: String!,
  $user_id: String!,
) {
  delete_deck(
    where: {
      campaign_id: { _eq: $campaign_id }
      investigator: { _eq: $investigator }
      owner_id: { _eq: $user_id }
    }
  ) {
    returning {
      id
      arkhamdb_id
      local_uuid
    }
  }
}

mutation setBinaryAchievement(
  $campaign_id: Int!,
  $achievement_id: String!,
  $value: Boolean!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id: $campaign_id
      achievement_id: $achievement_id
      type: "binary"
      bool_value: $value
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: [bool_value]
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    bool_value
  }
}

mutation incCountAchievementMax(
  $campaign_id: Int!,
  $achievement_id: String!,
  $max: Int!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 1
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
      value: { _lt: $max }
    }
    _inc: { value: 1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation incCountAchievement(
  $campaign_id: Int!,
  $achievement_id: String!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 1
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
    }
    _inc: { value: 1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation decCountAchievement(
  $campaign_id: Int!,
  $achievement_id: String!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 0
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
      value: { _gt: 0 }
    }
    _inc: { value: -1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation addGuideInput(
  $campaign_id: Int!,
  $scenario: String,
  $step: String,
  $payload: jsonb
) {
  insert_guide_input_one(
    object: {
      campaign_id: $campaign_id
      scenario: $scenario
      step: $step
      payload: $payload
    }
    on_conflict: {
      constraint: campaign_guide_input_campaign_guide_id_scenario_step_key
      update_columns: [payload]
    }
  ) {
    id
    campaign_id
    scenario
    step
    payload
  }
}

mutation updateInvestigatorTrauma(
  $campaign_id: Int!,
  $investigator: String!,
  $physical: Int,
  $mental: Int,
  $killed: Boolean,
  $insane: Boolean,
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      physical: $physical
      mental: $mental
      killed: $killed
      insane: $insane
    }
    on_conflict: {
      constraint: investigator_data_campaign_id_investigator_key
      update_columns: [physical, mental, killed, insane]
    }
  ) {
    id
    campaign_id
    investigator
    physical
    mental
    killed
    insane
  }
}


mutation updateInvestigatorData(
  $campaign_id: Int!,
  $investigator: String!,
  $physical: Int,
  $mental: Int,
  $killed: Boolean,
  $insane: Boolean,
  $added_cards: jsonb,
  $available_xp: Int,
  $story_assets: jsonb,
  $ignore_story_assets: jsonb,
  $removed_cards: jsonb
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      physical: $physical
      mental: $mental
      killed: $killed
      insane: $insane
      addedCards: $added_cards
      storyAssets: $story_assets
      ignoreStoryAssets: $ignore_story_assets
      removedCards: $removed_cards
      availableXp: $available_xp
    }
    on_conflict: {
      constraint: investigator_data_campaign_id_investigator_key
      update_columns: [
        physical, mental, killed, insane,
        addedCards, removedCards, storyAssets, ignoreStoryAssets,
	      availableXp
      ]
    }
  ) {
    id
    campaign_id
    investigator
    physical
    mental
    killed
    insane
    addedCards
    removedCards
    storyAssets
    ignoreStoryAssets
    availableXp
  }
}

mutation updateSpentXp(
  $campaign_id: Int!,
  $investigator: String!,
  $spent_xp: Int!
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      spentXp: $spent_xp
    }
    on_conflict: {
      constraint: investigator_data_campaign_id_investigator_key
      update_columns: [spentXp]
    }
  ) {
    id
    campaign_id
    investigator
    spentXp
  }
}


mutation updateAvailableXp(
  $campaign_id: Int!,
  $investigator: String!,
  $available_xp: Int!
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      availableXp: $available_xp
    }
    on_conflict: {
      constraint: investigator_data_campaign_id_investigator_key
      update_columns: [availableXp]
    }
  ) {
    id
    campaign_id
    investigator
    spentXp
  }
}

mutation updateWeaknessSet(
  $campaign_id: Int!,
  $weakness_set: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      weaknessSet: $weakness_set,
    },
  ) {
    id
    uuid
    weaknessSet
  }
}

mutation updateCampaignDifficulty(
  $campaign_id: Int!,
  $difficulty: String
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      difficulty: $difficulty,
    },
  ) {
    id
    uuid
    difficulty
  }
}

mutation updateCampaignScenarioResults(
  $campaign_id: Int!,
  $scenarioResults: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      scenarioResults: $scenarioResults,
    },
  ) {
    id
    uuid
    scenarioResults
  }
}

mutation updateCampaignGuideVersion(
  $campaign_id: Int!,
  $guideVersion: Int!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      guide_version: $guideVersion,
    },
  ) {
    id
    uuid
    guide_version
  }
}

mutation updateCampaignNotes(
  $campaign_id: Int!,
  $campaign_notes: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      campaignNotes: $campaign_notes,
    },
  ) {
    id
    uuid
    campaignNotes
  }
}

mutation updateCampaignShowInterludes(
  $campaign_id: Int!,
  $show_interludes: Boolean!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      showInterludes: $show_interludes,
    },
  ) {
    id
    uuid
    showInterludes
  }
}


mutation updateChaosBag(
  $campaign_id: Int!,
  $chaos_bag: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      chaosBag: $chaos_bag,
    },
  ) {
    id
    uuid
    chaosBag
  }
}

mutation updateCampaignName(
  $campaign_id: Int!,
  $name: String!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      name: $name
    }
  ) {
    id
    uuid
    name
  }
}

mutation addCampaignInvestigator(
  $campaign_id: Int!,
  $investigator: String!
) {
  insert_campaign_investigator_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
    }
    on_conflict: {
      constraint: campaign_investigator_campaign_id_investigator_key
      update_columns: []
    }
  ) {
    id
    investigator
    campaign_id
  }
}

mutation removeCampaignInvestigator(
  $campaign_id: Int!,
  $investigator: String!
) {
  delete_campaign_investigator(
    where: {
      campaign_id: { _eq: $campaign_id }
      investigator: {_eq: $investigator }
    }
  ) {
    affected_rows
    returning {
      id
    }
  }
}
