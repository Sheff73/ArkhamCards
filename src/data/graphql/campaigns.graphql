mutation updateCampaignName($campaignId: Int!, $name: String!) {
	update_campaign_by_pk(
    pk_columns: {id: $campaignId}
    _set: { name: $name }
  ) {
    id
    name
  }
}

mutation uploadNewCampaign(
  $campaignId: Int!,
  $cycleCode: String!,
  $standaloneId: jsonb,
  $showInterludes: Boolean,
  $name: String!,
  $difficulty: String,
  $campaignNotes: jsonb,
  $nonDeckInvestigators: jsonb,
  $scenarioResults: jsonb,
  $chaosBag: jsonb,
  $weaknessSet: jsonb,
  $inputs: [guide_input_insert_input!]!,
  $achievements: [guide_achievement_insert_input!]!,
  $investigator_data: [investigator_data_insert_input!]!
) {
  insert_guide_input(
    objects: $inputs
  ) {
    affected_rows
    returning {
      id
      campaign_id
      scenario
      step
      payload
      created_at
    }
  }
  insert_guide_achievement(
    objects: $achievements
  ) {
    affected_rows
  }
  insert_investigator_data(objects: $investigator_data){
    affected_rows
  }
   update_campaign_by_pk(
  pk_columns: { id: $campaignId}
	_set: {
    name: $name
    cycleCode: $cycleCode
    standaloneId: $standaloneId
    difficulty: $difficulty
    campaignNotes: $campaignNotes
    chaosBag: $chaosBag
    showInterludes: $showInterludes
    nonDeckInvestigators: $nonDeckInvestigators
    scenarioResults: $scenarioResults
    weaknessSet: $weaknessSet
  }) {
    id
    name
    cycleCode
    standaloneId
    difficulty
    campaignNotes
    chaosBag
    showInterludes
    nonDeckInvestigators
    scenarioResults
    weaknessSet
    guided
    guide_inputs {
      id
      step
      scenario
      payload
      created_at
    }
    guide_achivements {
      id
      achievement_id
      type
      bool_value
      value
      updated_at
    }
    investigator_data {
      investigator

      addedCards
      ignoreStoryAssets
      storyAssets
      removedCards

      insane
      killed
      mental
      physical

      availableXp
      spentXp
      specialXp

      updated_at
    }
  }
}

mutation deleteInvestigatorDecks(
  $campaign_id: Int!,
  $investigator: String!,
  $user_id: String!,
) {
  delete_deck(
    where: {
      campaign_id: { _eq: $campaign_id }
      investigator: { _eq: $investigator }
      owner_id: { _eq: $user_id }
    }
  ) {
    returning {
      id
    }
  }
}

mutation setBinaryAchievement(
  $campaign_id: Int!,
  $achievement_id: String!,
  $value: Boolean!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id: $campaign_id
      achievement_id: $achievement_id
      type: "binary"
      bool_value: $value
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: [bool_value]
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    bool_value
  }
}

mutation incCountAchievementMax(
  $campaign_id: Int!,
  $achievement_id: String!,
  $max: Int!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 1
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
      value: { _lt: $max }
    }
    _inc: { value: 1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation incCountAchievement(
  $campaign_id: Int!,
  $achievement_id: String!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 1
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
    }
    _inc: { value: 1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation decCountAchievement(
  $campaign_id: Int!,
  $achievement_id: String!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id:$campaign_id
      achievement_id: $achievement_id
      type: "count"
      value: 0
    }
    on_conflict: {
      constraint: guide_achivement_campaign_id_achievement_id_key
      update_columns: []
    }
  ) {
    id
    campaign_id
    achievement_id
    type
    value
  }
  update_guide_achievement(
    where: {
      campaign_id: { _eq: $campaign_id }
      achievement_id: { _eq: $achievement_id }
      value: { _gt: 0 }
    }
    _inc: { value: -1 }
  ) {
    returning {
      id
      campaign_id
      achievement_id
      type
      value
    }
  }
}

mutation addGuideInput(
  $campaign_id: Int!,
  $scenario: String,
  $step: String,
  $payload: jsonb
) {
  insert_guide_input_one(
    object: {
      campaign_id: $campaign_id
      scenario: $scenario
      step: $step
      payload: $payload
    }
    on_conflict: {
      constraint: campaign_guide_input_campaign_guide_id_scenario_step_key
      update_columns: [payload]
    }
  ) {
    id
    campaign_id
    scenario
    step
    payload
  }
}
fragment MiniCampaign on campaign {
  id
  name
  cycleCode
  standaloneId
  difficulty
  scenarioResults
  guided
  uuid
  latest_decks {
    deck {
      id
      investigator
    }
  }
  nonDeckInvestigators
  investigator_data {
    id
    investigator
    mental
    physical
    insane
    killed
    storyAssets
  }
  updated_at
}

query getMyCampaigns(
  $userId: String!
) {
  users_by_pk(id: $userId) {
    id
    campaigns {
      campaign {
        link_a_campaign {
          ...MiniCampaign
        }
        link_b_campaign {
          ...MiniCampaign
        }
        ...MiniCampaign
      }
    }
  }
}
